[{"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/index.tsx":"1","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/i18n.ts":"2","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/reportWebVitals.ts":"3","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/App.tsx":"4","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/providers/index.tsx":"5","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/store/index.ts":"6","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/store/userSlice.ts":"7","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/store/otherSlice.ts":"8","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/components/Nav/index.tsx":"9","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/views/Account/index.tsx":"10","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/theme/index.tsx":"11","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/utils/index.ts":"12","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/hooks/useERC20Single.ts":"13","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/hooks/useThemeMode.tsx":"14","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/components/TokenListSelect/index.tsx":"15","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/hooks/useSigner.ts":"16","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/constant/providers.ts":"17","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/blockchain/erc20Helper.ts":"18","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/blockchain/contracts/BaseErc20Factory.ts":"19","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/hooks/useTokenList.ts":"20","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/hooks/useBalances.ts":"21","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/constant/index.ts":"22","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/hooks/useMulticall.ts":"23","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/constant/unisave-mattataki@1.3.0.ts":"24","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/hooks/useLastUpdated.ts":"25","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/constant/unisave-list@1.1.10.ts":"26","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/constant/contracts.ts":"27","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/blockchain/contracts/MulticallFactory.ts":"28"},{"size":548,"mtime":1624962843787,"results":"29","hashOfConfig":"30"},{"size":596,"mtime":1624959827934,"results":"31","hashOfConfig":"30"},{"size":425,"mtime":1624959827937,"results":"32","hashOfConfig":"30"},{"size":436,"mtime":1624962888753,"results":"33","hashOfConfig":"30"},{"size":921,"mtime":1624961535031,"results":"34","hashOfConfig":"30"},{"size":1255,"mtime":1624959827938,"results":"35","hashOfConfig":"30"},{"size":1517,"mtime":1624959827938,"results":"36","hashOfConfig":"30"},{"size":281,"mtime":1624959827938,"results":"37","hashOfConfig":"30"},{"size":181,"mtime":1624962409715,"results":"38","hashOfConfig":"30"},{"size":3123,"mtime":1628669567363,"results":"39","hashOfConfig":"30"},{"size":3466,"mtime":1624960052043,"results":"40","hashOfConfig":"30"},{"size":552,"mtime":1624964599305,"results":"41","hashOfConfig":"30"},{"size":2288,"mtime":1628669233917,"results":"42","hashOfConfig":"30"},{"size":241,"mtime":1624959827934,"results":"43","hashOfConfig":"30"},{"size":5785,"mtime":1628668199197,"results":"44","hashOfConfig":"30"},{"size":626,"mtime":1628668311295,"results":"45","hashOfConfig":"30"},{"size":1071,"mtime":1628668265485,"results":"46","hashOfConfig":"30"},{"size":1540,"mtime":1628669188000,"results":"47","hashOfConfig":"30"},{"size":14204,"mtime":1628668169089,"results":"48","hashOfConfig":"30"},{"size":3761,"mtime":1628666845984,"results":"49","hashOfConfig":"30"},{"size":2503,"mtime":1628667908028,"results":"50","hashOfConfig":"30"},{"size":306,"mtime":1624967165023,"results":"51","hashOfConfig":"30"},{"size":1647,"mtime":1628668325994,"results":"52","hashOfConfig":"30"},{"size":8079,"mtime":1628666420392,"results":"53","hashOfConfig":"30"},{"size":227,"mtime":1628667851604,"results":"54","hashOfConfig":"30"},{"size":69733,"mtime":1628666420659,"results":"55","hashOfConfig":"30"},{"size":3639,"mtime":1628668245391,"results":"56","hashOfConfig":"30"},{"size":3025,"mtime":1628668169099,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"54p6k6",{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/index.tsx",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/i18n.ts",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/reportWebVitals.ts",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/App.tsx",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/providers/index.tsx",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/store/index.ts",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/store/userSlice.ts",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/store/otherSlice.ts",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/components/Nav/index.tsx",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/views/Account/index.tsx",["121","122","123"],"import React, { useState, useEffect } from 'react'\nimport { useWallet } from 'use-wallet'\nimport { utils } from 'ethers'\nimport { Button, Card, Avatar, Space, Typography } from 'antd'\nimport { UserOutlined } from '@ant-design/icons';\nimport { isEmpty } from 'lodash'\n\nimport { balanceDecimal, shortedWalletAccount } from '../../utils/index'\nimport TokenListSelect from '../../components/TokenListSelect/index'\nimport { StandardTokenProfile } from '../../typing/TokenList'\nimport { useERC20Single } from '../../hooks/useERC20Single';\n\nconst { Paragraph, Title, Text } = Typography;\n\nconst Account: React.FC = () => {\n  const wallet = useWallet()\n  const blockNumber = wallet.getBlockNumber()\n  const [currency, setCurrency] = useState<string>('');\n  const [currentToken, setCurrentToken] = useState<StandardTokenProfile>(\n    {} as StandardTokenProfile\n  );\n\n  useEffect(() => {\n    console.log('wallet', wallet)\n  }, [wallet])\n\n  const handlerSelectCurrentToken = (token: StandardTokenProfile) => {\n    console.log('token', token);\n    setCurrency(token.address);\n    setCurrentToken(token);\n  }\n\n  const {\n    tokenProfile,\n    formattedBalance,\n  } = useERC20Single(currency);\n\n  // modal 显示/隐藏\n  const [isModalVisible, setIsModalVisible] = useState(false)\n\n  return (\n    <div style={{ padding: 20 }}>\n      <h1>Wallet</h1>\n      {wallet.status === 'connected' ? (\n        <>\n          <Card>\n            <div>Account: {wallet.account}</div>\n            <div>Account: {shortedWalletAccount(wallet.account)}</div>\n            <div>Balance: {wallet.balance}</div>\n            <div>Balance: {utils.formatUnits(wallet.balance, 18)}</div>\n            <div>\n              Balance:{' '}\n              {balanceDecimal(utils.formatUnits(wallet.balance, 18), 3)}\n            </div>\n            <div>blockNumber: {blockNumber}</div>\n            <Button onClick={() => wallet.reset()}>disconnect</Button>\n          </Card>\n          <br />\n          <Card>\n            <Button onClick={() => setIsModalVisible(true)}>Select</Button>\n            <div>{currency}</div>\n            <>\n              {!isEmpty(currentToken) ?\n                <>\n                  <Space>\n                    <Avatar\n                      size={30}\n                      icon={<UserOutlined />}\n                      src={currentToken.logoURI}\n                    />\n                    <Text strong>{currentToken.symbol}({currentToken.name})</Text>\n                  </Space>\n                  <div>decimals: {currentToken.decimals}</div>\n                  <div>chainId: {currentToken.chainId}</div>\n                  <div>balance: {formattedBalance}</div>\n                </> : null\n              }\n            </>\n\n            <TokenListSelect\n              setCurrentToken={handlerSelectCurrentToken}\n              isModalVisible={isModalVisible}\n              setIsModalVisible={setIsModalVisible}\n            ></TokenListSelect>\n          </Card>\n        </>\n      ) : (\n        <Card>\n          Connect:\n          <Button onClick={() => wallet.connect()}>MetaMask</Button>\n        </Card>\n      )}\n    </div>\n  )\n}\n\nexport default Account\n","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/theme/index.tsx",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/utils/index.ts",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/hooks/useERC20Single.ts",["124"],"import { BigNumber, ethers, utils } from 'ethers';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { BaseErc20Factory } from '../blockchain/contracts/BaseErc20Factory';\nimport { ERC20Profile, getProfileOfERC20 } from '../blockchain/erc20Helper';\nimport { ZERO_ADDRESS } from '../constant';\nimport { currentProvider } from '../constant/providers';\nimport { useSigner } from './useSigner';\n\nconst profileWhileLoading: ERC20Profile = {\n  tokenAddress: ZERO_ADDRESS,\n  name: 'Loading Token Profile',\n  symbol: 'Please wait',\n  decimals: 18, // most the token use 18 decimals\n  balance: BigNumber.from(0),\n  updatedAtBlock: 0,\n};\n\n// no loop\nexport function useERC20Single(tokenAddress: string) {\n  const { account } = useWallet();\n  const { signer, isSignerReady } = useSigner();\n\n  const token = useMemo(() => {\n    const readonlyProvider = currentProvider as ethers.providers.Provider;\n    if (!tokenAddress)\n      return BaseErc20Factory.connect(ZERO_ADDRESS, readonlyProvider);\n    if (isSignerReady(signer)) {\n      return BaseErc20Factory.connect(tokenAddress, signer);\n    } else {\n      return BaseErc20Factory.connect(tokenAddress, readonlyProvider);\n    }\n  }, [tokenAddress, isSignerReady, signer]);\n\n  const [tokenProfile, setTokenProfile] = useState<ERC20Profile>(\n    profileWhileLoading\n  );\n\n  const isProfileLoading = useMemo(() => tokenProfile.updatedAtBlock === 0, [\n    tokenProfile,\n  ]);\n\n  const formattedBalance = useMemo(\n    () => utils.formatUnits(tokenProfile.balance, tokenProfile.decimals),\n    [tokenProfile]\n  );\n\n  const getProfile = useCallback(async () => {\n    if (token.address === ZERO_ADDRESS) return;\n\n    setTokenProfile(profileWhileLoading);\n    const profile = await getProfileOfERC20(token, account);\n    console.log('getProfileOfERC20 res', profile);\n    setTokenProfile(profile);\n  }, [token, account]);\n\n  /**\n   * use Dan's example\n   * https://github.com/facebook/react/issues/14326#issuecomment-441680293\n   */\n  useEffect(() => {\n    if (tokenAddress === ZERO_ADDRESS) return;\n    if (tokenAddress) {\n      getProfile();\n    }\n  }, [tokenAddress]); // 只需要执行一次，tokenAddress 变更调用\n\n  return { token, isProfileLoading, tokenProfile, formattedBalance };\n}\n","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/hooks/useThemeMode.tsx",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/components/TokenListSelect/index.tsx",["125"],"import React, { useState, useMemo } from 'react';\nimport styled from 'styled-components';\n\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Avatar, Button, Modal, Input, Radio, message } from 'antd';\nimport { UserOutlined, CopyOutlined } from '@ant-design/icons';\nimport { utils } from 'ethers';\n\nimport useTokenList from '../../hooks/useTokenList';\nimport { StandardTokenProfile } from '../../typing/TokenList';\nimport { isEmpty } from 'lodash';\nimport { shortedWalletAccount, balanceDecimal } from '../../utils/index';\nimport { useBalances } from '../../hooks/useBalances';\n\ninterface Props {\n  setCurrentToken: (token: StandardTokenProfile) => void;\n  isModalVisible: boolean;\n  setIsModalVisible: (val: boolean) => void;\n}\n\nconst TokenListSelect = ({\n  setCurrentToken,\n  isModalVisible,\n  setIsModalVisible,\n}: Props) => {\n  const [valueSelect, setValueSelect] = useState<'Unisave' | 'MatatakiBsc'>(\n    'Unisave'\n  ); // 同步于 TokenListURL key\n  const {\n    tokenListCurrent,\n    tokenListType,\n    toggleTokenList,\n    setSearchInputFn,\n    isContractAddress,\n  } = useTokenList();\n\n  // token 列表 纯地址\n  const tokenListAddress = useMemo(() => {\n    return tokenListCurrent.map(i => i.address);\n  }, [tokenListCurrent]);\n\n  const { balanceOf } = useBalances(tokenListAddress);\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  // token 列表选择\n  const onChangeSelect = async (e: any) => {\n    await setValueSelect(e.target.value);\n    await toggleTokenList(e.target.value);\n  };\n\n  // token search input\n  const onChangeSearchInput = async (e: any) => {\n    console.log('e', e.target.value);\n    await setSearchInputFn(e.target.value);\n  };\n\n  const handleItemClick = (token: StandardTokenProfile) => {\n    setCurrentToken(token);\n    setIsModalVisible(false);\n  };\n\n  // token list\n  const Item = () => {\n    return (\n      <StyledItem>\n        {isEmpty(tokenListCurrent) && isContractAddress ? (\n          <>\n            <StyledItemSearchText>Searching...</StyledItemSearchText>\n            <StyledItemSearchText>\n              If you wait too long, please make sure that address is right, or\n              check your network.\n            </StyledItemSearchText>\n          </>\n        ) : (\n          ''\n        )}\n        {tokenListCurrent.map((i: StandardTokenProfile) => (\n          <StyledItemLi\n            key={`${i.address}`}\n            onClick={() => {\n              handleItemClick(i);\n            }}>\n            <Avatar\n              size={24}\n              icon={<UserOutlined />}\n              src={\n                i.logoURI ||\n                'https://raw.githubusercontent.com/ant-design/ant-design-icons/master/packages/icons-svg/svg/outlined/question-circle.svg'\n              }\n            />\n            <StyledItemLiInfo>\n              <StyledItemSymbol>{i.name}</StyledItemSymbol>\n              <StyledItemAddress>\n                {shortedWalletAccount(i.address)}\n\n                <StyledItemCopy onClick={e => e.stopPropagation()}>\n                  <CopyToClipboard\n                    text={i.address}\n                    onCopy={() => {\n                      message.info('复制成功');\n                    }}>\n                    <CopyOutlined />\n                  </CopyToClipboard>\n                </StyledItemCopy>\n              </StyledItemAddress>\n            </StyledItemLiInfo>\n            <StyledItemBalance>\n              {balanceDecimal(\n                utils.formatUnits(balanceOf(i.address), i.decimals),\n                3\n              )}\n            </StyledItemBalance>\n          </StyledItemLi>\n        ))}\n      </StyledItem>\n    );\n  };\n\n  // token list select\n  const tokenListSelect = () => {\n    return (\n      <StyledSelect>\n        <Radio.Group onChange={onChangeSelect} value={valueSelect}>\n          {tokenListType.map((i, idx: number) => (\n            <Radio value={i.key} key={idx}>\n              <Avatar size={24} icon={<UserOutlined />} src={i.logoURI} />\n              <StyledSelectName>{i.name}</StyledSelectName>\n            </Radio>\n          ))}\n        </Radio.Group>\n      </StyledSelect>\n    );\n  };\n\n  return (\n    <Modal\n      title='Select Token'\n      visible={isModalVisible}\n      onOk={handleOk}\n      onCancel={handleCancel}\n      footer={null}>\n      <Input\n        placeholder='Search name or paste address'\n        onChange={onChangeSearchInput}\n        allowClear\n      />\n      {Item()}\n      {tokenListSelect()}\n    </Modal>\n  );\n};\n\n// item start\nconst StyledItem = styled.ul`\n  padding: 0;\n  margin: 20px 10px;\n  list-style: none;\n  max-height: 420px;\n  overflow: auto;\n`;\n\nconst StyledItemLi = styled.li`\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  cursor: pointer;\n  &:hover {\n    background-color: #f3f3f3;\n    border-radius: 3px;\n  }\n`;\nconst StyledItemLiInfo = styled.div`\n  margin-left: 10px;\n`;\n\nconst StyledItemBalance = styled.div`\n  margin-left: auto;\n  font-size: 14px;\n  color: #222;\n`;\n\nconst StyledItemSymbol = styled.div`\n  padding: 0;\n  margin: 0;\n  font-size: 14px;\n  color: #333;\n  font-weight: 500;\n  line-height: 1.6;\n`;\n\nconst StyledItemAddress = styled.div`\n  padding: 0;\n  margin: 0;\n  font-size: 14px;\n  font-size: 12px;\n  color: #757575;\n`;\nconst StyledItemCopy = styled.span`\n  margin-left: 4px;\n`;\nconst StyledItemSearchText = styled.p`\n  font-size: 14px;\n  color: #333;\n  margin: 6px 0;\n`;\n// item end\n\n// token list select start\nconst StyledSelect = styled.div`\n  margin: 40px 0 10px 0;\n  padding: 20px 10px 10px;\n  border-top: 1px solid #dfdfdf;\n`;\n\nconst StyledSelectName = styled.span`\n  margin-left: 12px;\n  font-size: 14px;\n  font-weight: 500;\n  color: #323232;\n`;\n\n// token list select end\n\nexport default TokenListSelect;\n","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/hooks/useSigner.ts",["126","127"],"import { ethers } from 'ethers';\nimport React, { useMemo } from 'react';\nimport { useWallet } from 'use-wallet';\n\nexport function useSigner(addressOrIndex?: string | number) {\n  const wallet = useWallet();\n  const signer = useMemo(() => {\n    if (!wallet.ethereum) return null;\n    const provider = new ethers.providers.Web3Provider(wallet.ethereum as any);\n    return provider.getSigner(addressOrIndex);\n  }, [wallet.ethereum]);\n\n  function isSignerReady(\n    signer: ethers.providers.JsonRpcSigner | null\n  ): signer is ethers.providers.JsonRpcSigner {\n    return Boolean(signer);\n  }\n\n  return { signer, isSignerReady };\n}\n","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/constant/providers.ts",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/blockchain/erc20Helper.ts",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/blockchain/contracts/BaseErc20Factory.ts",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/hooks/useTokenList.ts",["128"],"import { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  StandardTokenList,\n  StandardTokenProfile,\n  tokenListTypeProps,\n} from '../typing/TokenList';\nimport { utils } from 'ethers';\nimport { currentChainId, ZERO_ADDRESS } from '../constant/index';\n// import { useERC20Single } from './useERC20Single';\nimport { list as UnisaveList } from '../constant/unisave-list@1.1.10'\nimport { list as UnisaveMatatakiList } from '../constant/unisave-mattataki@1.3.0'\n\nexport const TokenListURL = {\n  // 'https://unpkg.com/@lychees/default-token-list@1.1.10/build/uniscam-default.tokenlist.json'\n  Unisave: UnisaveList,\n  // https://unpkg.com/@lychees/matataki-token-list@1.3.0/build/unisave-matataki.tokenlist.json\n  MatatakiBsc: UnisaveMatatakiList\n}\n\n// token 列表类型 用户用户选择\nconst tokenListType: tokenListTypeProps[] = [\n  {\n    logoURI:\n      'https://ipfs.io/ipfs/QmNa8mQkrNKp1WEEeGjFezDmDeodkWRevGFN8JCV7b4Xir',\n    name: 'Unisave Default List',\n    key: 'Unisave',\n    value: 'unisave',\n  },\n  {\n    logoURI:\n      'https://raw.githubusercontent.com/Matataki-io/Matataki-FE/master/assets/img/matataki_logo_small.png',\n    name: 'Unisave Matataki List',\n    key: 'MatatakiBsc',\n    value: 'matataki',\n  },\n];\n\nexport default function useTokenList() {\n  // token 列表\n  const [tokenList, setTokenList] = useState<StandardTokenProfile[]>([]);\n  // token all 信息\n  const [tokens, setTokens] = useState<StandardTokenList>(\n    {} as StandardTokenList\n  );\n  const [searchInput, setSearchInput] = useState<string>('');\n  // 是否为合约地址\n  const isContractAddress = useMemo(() => utils.isAddress(searchInput), [\n    searchInput,\n  ]);\n  // const { tokenProfile } = useERC20Single(isContractAddress ? searchInput : '');\n  const { tokenProfile }: any = { tokenProfile: {  } }\n\n  // 请求 token 列表\n  const tokenListFetch = useCallback(({ tokens }: { tokens: any }) => {\n\n\n    const list = (tokens as StandardTokenList).tokens.filter(\n      i => Number(i.chainId) === Number(currentChainId)\n    );\n\n    setTokenList(list);\n\n    setTokens(tokens);\n\n  }, []);\n\n  // 切换 token 列表\n  const toggleTokenList = async (key: 'Unisave' | 'MatatakiBsc') => {\n    await tokenListFetch({ tokens: TokenListURL[key] });\n  };\n\n  // 设置搜索内容\n  const setSearchInputFn = (val: string) => setSearchInput(val);\n\n  // 执行一次 默认获取一次 token 列表\n  useEffect(() => {\n    tokenListFetch({ tokens: TokenListURL.Unisave });\n  }, []);\n\n  // 当前 token 列表，筛选后\n  const tokenListCurrent = useMemo(() => {\n    if (searchInput === '') {\n      return tokenList;\n    } else if (isContractAddress) {\n      // 如果地址在 列表里面\n      const findInList = tokenList.find(\n        t => utils.getAddress(t.address) === utils.getAddress(searchInput)\n      );\n      if (findInList) return [findInList];\n\n      // 如果是 ZERO_ADDRESS\n      if (tokenProfile.tokenAddress === ZERO_ADDRESS) return [];\n\n      // other token address\n      return [\n        {\n          chainId: currentChainId,\n          address: searchInput,\n          logoURI:\n            'https://raw.githubusercontent.com/ant-design/ant-design-icons/master/packages/icons-svg/svg/outlined/question-circle.svg',\n          name: tokenProfile.name,\n          symbol: tokenProfile.symbol,\n          decimals: tokenProfile.decimals,\n        },\n      ] as StandardTokenProfile[];\n    } else {\n      // name search\n      return tokenList.filter(i =>\n        i.name.toLocaleLowerCase().includes(searchInput.toLocaleLowerCase())\n      );\n    }\n  }, [tokenList, searchInput, tokenProfile, isContractAddress]);\n\n  return {\n    tokens,\n    tokenListCurrent,\n    tokenListType,\n    toggleTokenList,\n    setSearchInputFn,\n    isContractAddress,\n  };\n}\n","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/hooks/useBalances.ts",["129","130","131","132"],"import { BigNumber, BigNumberish, utils } from 'ethers';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { useLastUpdated } from './useLastUpdated';\nimport { staticMulticall } from './useMulticall';\n\ntype BalanceSheet = Record<string, BigNumber | undefined>;\n\nconst ABI = ['function balanceOf(address) view returns (uint256)'];\nconst balanceOfInterface = new utils.Interface(ABI);\n\nexport function useBalances(tokens: string[]) {\n  // make sure every `tokens` addresses is checksumed\n  const checksumedTokenAddresses = useMemo(\n    () => tokens.map(t => utils.getAddress(t)),\n    [tokens]\n  );\n\n  const { account } = useWallet();\n  const [balanceSheet, setBalances] = useState<BalanceSheet>({});\n  const { lastUpdated, updated } = useLastUpdated();\n\n  const balanceOf = useCallback(\n    (target: string) => {\n      // @todo: if `target` not exist, enlist the `target` into the BalanceSheet and update\n      return balanceSheet[utils.getAddress(target)] || BigNumber.from(0);\n    },\n    [tokens.join(), balanceSheet]\n  );\n\n  const fetchBalances = useCallback(async () => {\n    if (!account) return;\n    // const result = await tokens.balanceOf(account as string);\n    // setBalances(result);\n    const calls = checksumedTokenAddresses.map(target => ({\n      target,\n      callData: balanceOfInterface.encodeFunctionData('balanceOf', [account]),\n    }));\n    const { returnData } = await staticMulticall.callStatic.aggregate(calls);\n    console.info('returnData', returnData);\n    const sheet: BalanceSheet = {};\n    checksumedTokenAddresses.forEach((token, idx) => {\n      let [balance] = balanceOfInterface.decodeFunctionResult(\n        'balanceOf',\n        returnData[idx]\n      );\n      sheet[token] = balance as BigNumber;\n    });\n    console.info('sheet', sheet);\n    setBalances(sheet);\n    updated();\n  }, [checksumedTokenAddresses.join(), account]);\n  /**\n   * use Dan's example\n   * https://github.com/facebook/react/issues/14326#issuecomment-441680293\n   */\n  useEffect(() => {\n    if (tokens.length === 0 || !account) return;\n    // if (account && tokens) {\n    fetchBalances();\n    // }\n    let refreshInterval = setInterval(fetchBalances, 1000 * 10);\n    return () => clearInterval(refreshInterval);\n  }, [account, fetchBalances, tokens]);\n\n  const isEnough = useCallback(\n    (target: string, x: BigNumberish) => balanceOf(target).gte(x),\n    [balanceSheet, balanceOf]\n  );\n\n  return { balanceOf, isEnough, lastUpdated };\n}\n","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/constant/index.ts",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/hooks/useMulticall.ts",["133"],"import { FunctionFragment } from '@ethersproject/abi';\nimport { BytesLike, ethers, utils } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport { Multicall__factory } from '../blockchain/contracts/MulticallFactory';\nimport { currentMulticallAddress } from '../constant/contracts';\nimport { currentProvider } from '../constant/providers';\nimport { useSigner } from './useSigner';\n\nexport const staticMulticall = Multicall__factory.connect(\n  currentMulticallAddress,\n  currentProvider as ethers.providers.Provider\n);\n\nexport function useMulticall() {\n  const { signer, isSignerReady } = useSigner();\n  const Multicall = useMemo(() => {\n    if (isSignerReady(signer)) {\n      return Multicall__factory.connect(currentMulticallAddress, signer);\n    } else {\n      return staticMulticall;\n    }\n  }, [signer]);\n\n  const aggerateQuery = useCallback(\n    async (\n      _calls: Array<{\n        target: string;\n        iface: utils.Interface;\n        funcFrag: FunctionFragment;\n        data: any[];\n      }>\n    ) => {\n      const calls: Array<{ target: string; callData: BytesLike }> = _calls.map(\n        c => {\n          return {\n            target: c.target,\n            callData: c.iface.encodeFunctionData(c.funcFrag, c.data),\n          };\n        }\n      );\n      const { returnData, blockNumber } = await Multicall.callStatic.aggregate(\n        calls\n      );\n      const returns = returnData.map((result, idx) => {\n        const _ = _calls[idx];\n        return _.iface.decodeFunctionResult(_.funcFrag, result);\n      });\n      return { returns, blockNumber };\n    },\n    [Multicall]\n  );\n\n  return { Multicall, aggerateQuery };\n}\n","/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/constant/unisave-mattataki@1.3.0.ts",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/hooks/useLastUpdated.ts",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/constant/unisave-list@1.1.10.ts",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/constant/contracts.ts",[],"/Users/xiaotian/Code/cli-ant-temp/react-chain-temp/src/blockchain/contracts/MulticallFactory.ts",[],{"ruleId":"134","severity":1,"message":"135","line":13,"column":9,"nodeType":"136","messageId":"137","endLine":13,"endColumn":18},{"ruleId":"134","severity":1,"message":"138","line":13,"column":20,"nodeType":"136","messageId":"137","endLine":13,"endColumn":25},{"ruleId":"134","severity":1,"message":"139","line":34,"column":5,"nodeType":"136","messageId":"137","endLine":34,"endColumn":17},{"ruleId":"140","severity":1,"message":"141","line":66,"column":6,"nodeType":"142","endLine":66,"endColumn":20,"suggestions":"143"},{"ruleId":"134","severity":1,"message":"144","line":5,"column":18,"nodeType":"136","messageId":"137","endLine":5,"endColumn":24},{"ruleId":"134","severity":1,"message":"145","line":2,"column":8,"nodeType":"136","messageId":"137","endLine":2,"endColumn":13},{"ruleId":"140","severity":1,"message":"146","line":11,"column":6,"nodeType":"142","endLine":11,"endColumn":23,"suggestions":"147"},{"ruleId":"140","severity":1,"message":"148","line":78,"column":6,"nodeType":"142","endLine":78,"endColumn":8,"suggestions":"149"},{"ruleId":"140","severity":1,"message":"150","line":28,"column":6,"nodeType":"151","endLine":28,"endColumn":19},{"ruleId":"140","severity":1,"message":"152","line":52,"column":6,"nodeType":"142","endLine":52,"endColumn":48,"suggestions":"153"},{"ruleId":"140","severity":1,"message":"150","line":52,"column":7,"nodeType":"151","endLine":52,"endColumn":38},{"ruleId":"140","severity":1,"message":"154","line":68,"column":5,"nodeType":"142","endLine":68,"endColumn":30,"suggestions":"155"},{"ruleId":"140","severity":1,"message":"156","line":22,"column":6,"nodeType":"142","endLine":22,"endColumn":14,"suggestions":"157"},"@typescript-eslint/no-unused-vars","'Paragraph' is assigned a value but never used.","Identifier","unusedVar","'Title' is assigned a value but never used.","'tokenProfile' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getProfile'. Either include it or remove the dependency array.","ArrayExpression",["158"],"'Button' is defined but never used.","'React' is defined but never used.","React Hook useMemo has a missing dependency: 'addressOrIndex'. Either include it or remove the dependency array.",["159"],"React Hook useEffect has a missing dependency: 'tokenListFetch'. Either include it or remove the dependency array.",["160"],"React Hook useCallback has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook useCallback has missing dependencies: 'checksumedTokenAddresses' and 'updated'. Either include them or remove the dependency array.",["161"],"React Hook useCallback has an unnecessary dependency: 'balanceSheet'. Either exclude it or remove the dependency array.",["162"],"React Hook useMemo has a missing dependency: 'isSignerReady'. Either include it or remove the dependency array.",["163"],{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},"Update the dependencies array to be: [getProfile, tokenAddress]",{"range":"176","text":"177"},"Update the dependencies array to be: [addressOrIndex, wallet.ethereum]",{"range":"178","text":"179"},"Update the dependencies array to be: [tokenListFetch]",{"range":"180","text":"181"},"Update the dependencies array to be: [account, checksumedTokenAddresses, updated]",{"range":"182","text":"183"},"Update the dependencies array to be: [balanceOf]",{"range":"184","text":"185"},"Update the dependencies array to be: [isSignerReady, signer]",{"range":"186","text":"187"},[2145,2159],"[getProfile, tokenAddress]",[410,427],"[addressOrIndex, wallet.ethereum]",[2383,2385],"[tokenListFetch]",[1878,1920],"[account, checksumedTokenAddresses, updated]",[2422,2447],"[balanceOf]",[811,819],"[isSignerReady, signer]"]